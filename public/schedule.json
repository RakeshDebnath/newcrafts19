{
    "days": [
        {
            "day": 1,
            "date": "15/05/2019",
            "title": "Workshops",
            "rooms": [
                {
                    "room": "Room 1",
                    "events": [
                        {
                            "type": "conference",
                            "image": "http://ncrafts.io/assets/img/speakers/mverraes.jpg",
                            "time": "9:00 - 11h00",
                            "title": "DDD Modelling vs Implementation",
                            "description": "The design patterns from Domain-Driven Design are gradually entering the collective consciousness of software developers. But most of the information out there focuses on mechanistic implementation details of the patterns: how to make an Entity in [insert favourite programming language], how to use the Repository pattern with [insert new hot ORM], how to make immutable Value Objects in [insert legacy framework]...<br><br>Applied individually, these patterns are useful, but are not giving you the full potential of Domain-Driven Design.<br><br>This one day training has a different approach. We address technical concerns in implementing the DDD patterns, but the focus is on the underlying principles and heuristics for building great domain-centric object-oriented code.<br><br><ul><li>* Why you’re underusing Value Objects</li><li>* Seeing objects as containers of lifecycles and consistency</li><li>* Discovering deeper domain concepts such as business rules, and lifting them into first class domain objects</li><li>* The relevance of processes, behaviour, temporal modelling... for finding better Aggregate boundaries</li><li>* How mutable software designs have distorted our perception of mutability in the domain</li><li>* Better heuristics for understanding a complex domain, and using them to drive a more focused design</li><li>* Reducing our dependance on service classes</li><li>* Designing an implementation model that not only encapsulates the domain, but communicates that design to future programmers and reduces their surface area for bugs</li><li>* ...</li></ul>This workshop, aimed at programmers, is designed to give you immediate benefits when modelling and implementing the most important parts of your codebase.",
                            "author": "Mathias Verraes"
                        },
                        {
                            "type": "conference",
                            "image": "http://ncrafts.io/assets/img/speakers/kennybrunothomas.jpg",
                            "time": "11:00 - 13:00",
                            "title": "EventStorming and Example Mapping From Problem Space to Solution Space",
                            "description": "The design patterns from Domain-Driven Design are gradually entering the collective consciousness of software developers. But most of the information out there focuses on mechanistic implementation details of the patterns: how to make an Entity in [insert favourite programming language], how to use the Repository pattern with [insert new hot ORM], how to make immutable Value Objects in [insert legacy framework]...<br><br>Applied individually, these patterns are useful, but are not giving you the full potential of Domain-Driven Design.<br><br>This one day training has a different approach. We address technical concerns in implementing the DDD patterns, but the focus is on the underlying principles and heuristics for building great domain-centric object-oriented code.<br><br><ul><li>* Why you’re underusing Value Objects</li><li>* Seeing objects as containers of lifecycles and consistency</li><li>* Discovering deeper domain concepts such as business rules, and lifting them into first class domain objects</li><li>* The relevance of processes, behaviour, temporal modelling... for finding better Aggregate boundaries</li><li>* How mutable software designs have distorted our perception of mutability in the domain</li><li>* Better heuristics for understanding a complex domain, and using them to drive a more focused design</li><li>* Reducing our dependance on service classes</li><li>* Designing an implementation model that not only encapsulates the domain, but communicates that design to future programmers and reduces their surface area for bugs</li><li>* ...</li></ul>This workshop, aimed at programmers, is designed to give you immediate benefits when modelling and implementing the most important parts of your codebase.",
                            "author": "Kenny Baas-Schwegler, Bruno Boucard & Thomas Pierrain"
                        },
                        {
                            "type": "conference",
                            "image": "http://ncrafts.io/assets/img/speakers/khenney.jpg",
                            "time": "14:00 - 16:00",
                            "title": "Refactoring to Immutability",
                            "description": "The design patterns from Domain-Driven Design are gradually entering the collective consciousness of software developers. But most of the information out there focuses on mechanistic implementation details of the patterns: how to make an Entity in [insert favourite programming language], how to use the Repository pattern with [insert new hot ORM], how to make immutable Value Objects in [insert legacy framework]...<br><br>Applied individually, these patterns are useful, but are not giving you the full potential of Domain-Driven Design.<br><br>This one day training has a different approach. We address technical concerns in implementing the DDD patterns, but the focus is on the underlying principles and heuristics for building great domain-centric object-oriented code.<br><br><ul><li>* Why you’re underusing Value Objects</li><li>* Seeing objects as containers of lifecycles and consistency</li><li>* Discovering deeper domain concepts such as business rules, and lifting them into first class domain objects</li><li>* The relevance of processes, behaviour, temporal modelling... for finding better Aggregate boundaries</li><li>* How mutable software designs have distorted our perception of mutability in the domain</li><li>* Better heuristics for understanding a complex domain, and using them to drive a more focused design</li><li>* Reducing our dependance on service classes</li><li>* Designing an implementation model that not only encapsulates the domain, but communicates that design to future programmers and reduces their surface area for bugs</li><li>* ...</li></ul>This workshop, aimed at programmers, is designed to give you immediate benefits when modelling and implementing the most important parts of your codebase.",
                            "author": "Kevlin Henney"
                        },
                        {
                            "type": "conference",
                            "image": "http://ncrafts.io/assets/img/speakers/wzuill.jpg",
                            "time": "16:00 - 18:00",
                            "title": "Mob Programming",
                            "description": "The design patterns from Domain-Driven Design are gradually entering the collective consciousness of software developers. But most of the information out there focuses on mechanistic implementation details of the patterns: how to make an Entity in [insert favourite programming language], how to use the Repository pattern with [insert new hot ORM], how to make immutable Value Objects in [insert legacy framework]...<br><br>Applied individually, these patterns are useful, but are not giving you the full potential of Domain-Driven Design.<br><br>This one day training has a different approach. We address technical concerns in implementing the DDD patterns, but the focus is on the underlying principles and heuristics for building great domain-centric object-oriented code.<br><br><ul><li>* Why you’re underusing Value Objects</li><li>* Seeing objects as containers of lifecycles and consistency</li><li>* Discovering deeper domain concepts such as business rules, and lifting them into first class domain objects</li><li>* The relevance of processes, behaviour, temporal modelling... for finding better Aggregate boundaries</li><li>* How mutable software designs have distorted our perception of mutability in the domain</li><li>* Better heuristics for understanding a complex domain, and using them to drive a more focused design</li><li>* Reducing our dependance on service classes</li><li>* Designing an implementation model that not only encapsulates the domain, but communicates that design to future programmers and reduces their surface area for bugs</li><li>* ...</li></ul>This workshop, aimed at programmers, is designed to give you immediate benefits when modelling and implementing the most important parts of your codebase.",
                            "author": "Woody Zuill"
                        }
                    ]
                }
            ]
        },
        {
            "day": 2,
            "date": "16/05/2019",
            "title": "Day 1",
            "rooms": [
                {
                    "room": "Room 1",
                    "events": [
                        {
                            "type": "break",
                            "image": "",
                            "time": "9:00 - 9h10",
                            "title": "Check-in time",
                            "description": "",
                            "author": ""
                        },
                        {
                            "type": "conference",
                            "image": "",
                            "time": "9:00 - 11h00",
                            "title": "Opening words",
                            "description": "",
                            "author": ""
                        },
                        {
                            "type": "conference",
                            "image": "http://ncrafts.io/assets/img/speakers/umalmgren.jpg",
                            "time": "9:00 - 11h00",
                            "title": "The one with the compiler always wins",
                            "description": "",
                            "author": "Ulrika Malmgren"
                        },
                        {
                            "type": "lunch",
                            "image": "",
                            "time": "13:00 - 14h00",
                            "title": "Lunch break",
                            "description": "",
                            "author": ""
                        }
                    ]
                }
            ]
        },
        {
            "day": 3,
            "date": "17/05/2019",
            "title": "Day 2",
            "rooms": [
                {
                    "room": "Room 1",
                    "events": [
                        {
                            "type": "conference",
                            "image": "http://ncrafts.io/assets/img/speakers/mverraes.jpg",
                            "time": "9:00 - 11h00",
                            "title": "DDD Modelling vs Implementation",
                            "description": "some content",
                            "author": "MATHIAS VERRAES"
                        }
                    ]
                }
            ]
        }
    ]
}
